import { renderSearchFormBlock } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
const date = new Date();
const nextDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
const nextDateDay = nextDate.getDate() < 10 ? '0' + nextDate.getDate() : nextDate.getDate();
const nextDateMonth = nextDate.getMonth() + 1 < 10 ? '0' + (nextDate.getMonth() + 1) : nextDate.getMonth() + 1;
const nextDateYear = nextDate.getFullYear() + '';
const nextDay = `${nextDateYear}-${nextDateMonth}-${nextDateDay}`;
const secondDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 3);
const secondDateDay = secondDate.getDate() < 10 ? '0' + secondDate.getDate() : secondDate.getDate();
const secondDateMonth = secondDate.getMonth() + 1 < 10 ? '0' + (secondDate.getMonth() + 1) : secondDate.getMonth() + 1;
const secondDateYear = secondDate.getFullYear() + '';
const secondDay = `${secondDateYear}-${secondDateMonth}-${secondDateDay}`;
let userData;
let favoritesAmount;
export const getUserData = () => {
    localStorage.setItem('user', JSON.stringify({ username: 'John Smith', avatarURL: '/img/avatar.png' }));
    return JSON.parse(localStorage.getItem('user'));
};
export const isUserData = (data) => {
    return typeof data === 'object' && data !== null && 'username' in data && 'avatarURL' in data;
};
export const getFavoritesAmount = () => {
    //console.log(JSON.parse(localStorage.getItem('favoritesAmount')))
    const result = localStorage.getItem('favoritesAmount');
    if (result !== null) {
        return Object.keys(JSON.parse(result)).length;
    }
    return 0;
};
window.addEventListener('DOMContentLoaded', () => {
    userData = getUserData();
    favoritesAmount = getFavoritesAmount();
    if (isUserData(userData) && typeof favoritesAmount === 'number') {
        renderUserBlock(userData.username, userData.avatarURL, favoritesAmount);
    }
    renderSearchFormBlock(nextDay, secondDay);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7QUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7QUFDaEYsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQzNGLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDOUcsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUNoRCxNQUFNLE9BQU8sR0FBRyxHQUFHLFlBQVksSUFBSSxhQUFhLElBQUksV0FBVyxFQUFFLENBQUE7QUFDakUsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckYsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3BHLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkgsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNyRCxNQUFNLFNBQVMsR0FBRyxHQUFHLGNBQWMsSUFBSSxlQUFlLElBQUksYUFBYSxFQUFFLENBQUM7QUFFMUUsSUFBSSxRQUFpQixDQUFBO0FBQ3JCLElBQUksZUFBd0IsQ0FBQTtBQU01QixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBWSxFQUFFO0lBQ3ZDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxDQUFDLENBQUMsQ0FBQTtJQUNwRyxPQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQVcsQ0FBQyxDQUFBO0FBQzVELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQWEsRUFBbUIsRUFBRTtJQUMzRCxPQUFPLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksV0FBVyxJQUFJLElBQUksQ0FBQTtBQUMvRixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFVLEVBQUU7SUFDNUMsa0VBQWtFO0lBQ2xFLE1BQU0sTUFBTSxHQUFrQixZQUFZLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDckUsSUFBRyxNQUFNLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0tBQzlDO0lBQ0QsT0FBTyxDQUFDLENBQUE7QUFDVixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQy9DLFFBQVEsR0FBRyxXQUFXLEVBQUUsQ0FBQTtJQUN4QixlQUFlLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQTtJQUN0QyxJQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLGVBQWUsS0FBSyxRQUFRLEVBQUU7UUFDOUQsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQTtLQUN4RTtJQUNELHFCQUFxQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUN6QyxxQkFBcUIsRUFBRSxDQUFBO0lBQ3ZCLFdBQVcsQ0FDVCxFQUFDLElBQUksRUFBRSwyREFBMkQsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLEVBQ3BGLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBLENBQUEsQ0FBQyxFQUFDLENBQ3JFLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlclNlYXJjaEZvcm1CbG9jayB9IGZyb20gJy4vc2VhcmNoLWZvcm0uanMnXG5pbXBvcnQgeyByZW5kZXJTZWFyY2hTdHViQmxvY2sgfSBmcm9tICcuL3NlYXJjaC1yZXN1bHRzLmpzJ1xuaW1wb3J0IHsgcmVuZGVyVXNlckJsb2NrIH0gZnJvbSAnLi91c2VyLmpzJ1xuaW1wb3J0IHsgcmVuZGVyVG9hc3QgfSBmcm9tICcuL2xpYi5qcydcblxuY29uc3QgZGF0ZSA9IG5ldyBEYXRlKClcbmNvbnN0IG5leHREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksZGF0ZS5nZXREYXRlKCkgKzEpXG5jb25zdCBuZXh0RGF0ZURheSA9IG5leHREYXRlLmdldERhdGUoKSA8IDEwID8gJzAnICsgbmV4dERhdGUuZ2V0RGF0ZSgpIDogbmV4dERhdGUuZ2V0RGF0ZSgpXG5jb25zdCBuZXh0RGF0ZU1vbnRoID0gbmV4dERhdGUuZ2V0TW9udGgoKSArIDEgPCAxMCA/ICcwJyArIChuZXh0RGF0ZS5nZXRNb250aCgpICsgMSkgOiBuZXh0RGF0ZS5nZXRNb250aCgpICsgMVxuY29uc3QgbmV4dERhdGVZZWFyID0gbmV4dERhdGUuZ2V0RnVsbFllYXIoKSArICcnXG5jb25zdCBuZXh0RGF5ID0gYCR7bmV4dERhdGVZZWFyfS0ke25leHREYXRlTW9udGh9LSR7bmV4dERhdGVEYXl9YFxuY29uc3Qgc2Vjb25kRGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIDMpO1xuY29uc3Qgc2Vjb25kRGF0ZURheSA9IHNlY29uZERhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyBzZWNvbmREYXRlLmdldERhdGUoKSA6IHNlY29uZERhdGUuZ2V0RGF0ZSgpO1xuY29uc3Qgc2Vjb25kRGF0ZU1vbnRoID0gc2Vjb25kRGF0ZS5nZXRNb250aCgpICsgMSA8IDEwID8gJzAnICsgKHNlY29uZERhdGUuZ2V0TW9udGgoKSArIDEpIDogc2Vjb25kRGF0ZS5nZXRNb250aCgpICsgMTtcbmNvbnN0IHNlY29uZERhdGVZZWFyID0gc2Vjb25kRGF0ZS5nZXRGdWxsWWVhcigpICsgJyc7XG5jb25zdCBzZWNvbmREYXkgPSBgJHtzZWNvbmREYXRlWWVhcn0tJHtzZWNvbmREYXRlTW9udGh9LSR7c2Vjb25kRGF0ZURheX1gO1xuXG5sZXQgdXNlckRhdGE6IHVua25vd25cbmxldCBmYXZvcml0ZXNBbW91bnQ6IHVua25vd25cbmludGVyZmFjZSBVc2VyRGF0YSB7XG4gIHVzZXJuYW1lOiBzdHJpbmcsXG4gIGF2YXRhclVSTDogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyRGF0YSA9ICgpOlVzZXJEYXRhID0+IHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh7dXNlcm5hbWU6ICdKb2huIFNtaXRoJywgYXZhdGFyVVJMOiAnL2ltZy9hdmF0YXIucG5nJ30pKVxuICByZXR1cm4gIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSBhcyBzdHJpbmcpXG59XG5cbmV4cG9ydCBjb25zdCBpc1VzZXJEYXRhID0gKGRhdGE6IHVua25vd24pOmRhdGEgaXMgVXNlckRhdGEgPT4ge1xuICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEgIT09IG51bGwgJiYgJ3VzZXJuYW1lJyBpbiBkYXRhICYmICdhdmF0YXJVUkwnIGluIGRhdGFcbn1cblxuZXhwb3J0IGNvbnN0IGdldEZhdm9yaXRlc0Ftb3VudCA9ICgpOm51bWJlciA9PiB7XG4gIC8vY29uc29sZS5sb2coSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzQW1vdW50JykpKVxuICBjb25zdCByZXN1bHQ6IHN0cmluZyB8IG51bGwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzQW1vdW50JylcbiAgaWYocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKEpTT04ucGFyc2UocmVzdWx0KSkubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIDBcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIHVzZXJEYXRhID0gZ2V0VXNlckRhdGEoKVxuICBmYXZvcml0ZXNBbW91bnQgPSBnZXRGYXZvcml0ZXNBbW91bnQoKVxuICBpZihpc1VzZXJEYXRhKHVzZXJEYXRhKSAmJiB0eXBlb2YgZmF2b3JpdGVzQW1vdW50ID09PSAnbnVtYmVyJykge1xuICAgIHJlbmRlclVzZXJCbG9jayh1c2VyRGF0YS51c2VybmFtZSwgdXNlckRhdGEuYXZhdGFyVVJMLCBmYXZvcml0ZXNBbW91bnQpXG4gIH1cbiAgcmVuZGVyU2VhcmNoRm9ybUJsb2NrKG5leHREYXksIHNlY29uZERheSlcbiAgcmVuZGVyU2VhcmNoU3R1YkJsb2NrKClcbiAgcmVuZGVyVG9hc3QoXG4gICAge3RleHQ6ICfQrdGC0L4g0L/RgNC40LzQtdGAINGD0LLQtdC00L7QvNC70LXQvdC40Y8uINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0LXQs9C+INC/0YDQuCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLQuCcsIHR5cGU6ICdzdWNjZXNzJ30sXG4gICAge25hbWU6ICfQn9C+0L3Rj9C7JywgaGFuZGxlcjogKCkgPT4ge2NvbnNvbGUubG9nKCfQo9Cy0LXQtNC+0LzQu9C10L3QuNC1INC30LDQutGA0YvRgtC+Jyl9fVxuICApXG59KVxuXG4iXX0=