import { renderSearchFormBlock } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
const date = new Date();
const nextDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
const nextDateDay = nextDate.getDate() < 10 ? '0' + nextDate.getDate() : nextDate.getDate();
const nextDateMonth = nextDate.getMonth() + 1 < 10 ? '0' + (nextDate.getMonth() + 1) : nextDate.getMonth() + 1;
const nextDateYear = nextDate.getFullYear() + '';
const nextDay = `${nextDateYear}-${nextDateMonth}-${nextDateDay}`;
const secondDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 3);
const secondDateDay = secondDate.getDate() < 10 ? '0' + secondDate.getDate() : secondDate.getDate();
const secondDateMonth = secondDate.getMonth() + 1 < 10 ? '0' + (secondDate.getMonth() + 1) : secondDate.getMonth() + 1;
const secondDateYear = secondDate.getFullYear() + '';
const secondDay = `${secondDateYear}-${secondDateMonth}-${secondDateDay}`;
let userData;
let favoritesAmount;
const getUserData = () => {
    localStorage.setItem('user', JSON.stringify({ username: 'John Smith', avatarURL: '/img/avatar.png' }));
    return userData = JSON.parse(localStorage.getItem('user'));
};
const validateData = (data) => {
    console.log(data, data.username, data.avatarURL, typeof data, typeof data === 'object', 'username' in data, 'avatarURL' in data);
    if (typeof data === 'object' && 'username' in data && 'avatarURL' in data) {
        console.log(data);
        return data;
    }
};
const getFavoritesAmount = () => {
    localStorage.setItem('favoritesAmount', '5');
    return localStorage.getItem('favoritesAmount');
};
getUserData();
window.addEventListener('DOMContentLoaded', () => {
    const data = validateData(userData);
    favoritesAmount = Number(getFavoritesAmount());
    if (typeof favoritesAmount === 'number') {
        renderUserBlock(data.username, data.avatarURL, favoritesAmount);
    }
    renderSearchFormBlock(nextDay, secondDay);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7QUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7QUFDaEYsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQzNGLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDOUcsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUNoRCxNQUFNLE9BQU8sR0FBRyxHQUFHLFlBQVksSUFBSSxhQUFhLElBQUksV0FBVyxFQUFFLENBQUE7QUFDakUsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJ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QUMscUJBQXFCLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUNyRSxDQUFBO0FBQ0gsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJTZWFyY2hGb3JtQmxvY2sgfSBmcm9tICcuL3NlYXJjaC1mb3JtLmpzJ1xuaW1wb3J0IHsgcmVuZGVyU2VhcmNoU3R1YkJsb2NrIH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0cy5qcydcbmltcG9ydCB7IHJlbmRlclVzZXJCbG9jayB9IGZyb20gJy4vdXNlci5qcydcbmltcG9ydCB7IHJlbmRlclRvYXN0IH0gZnJvbSAnLi9saWIuanMnXG5cbmNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG5jb25zdCBuZXh0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLGRhdGUuZ2V0RGF0ZSgpICsxKVxuY29uc3QgbmV4dERhdGVEYXkgPSBuZXh0RGF0ZS5nZXREYXRlKCkgPCAxMCA/ICcwJyArIG5leHREYXRlLmdldERhdGUoKSA6IG5leHREYXRlLmdldERhdGUoKVxuY29uc3QgbmV4dERhdGVNb250aCA9IG5leHREYXRlLmdldE1vbnRoKCkgKyAxIDwgMTAgPyAnMCcgKyAobmV4dERhdGUuZ2V0TW9udGgoKSArIDEpIDogbmV4dERhdGUuZ2V0TW9udGgoKSArIDFcbmNvbnN0IG5leHREYXRlWWVhciA9IG5leHREYXRlLmdldEZ1bGxZZWFyKCkgKyAnJ1xuY29uc3QgbmV4dERheSA9IGAke25leHREYXRlWWVhcn0tJHtuZXh0RGF0ZU1vbnRofS0ke25leHREYXRlRGF5fWBcbmNvbnN0IHNlY29uZERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyAzKTtcbmNvbnN0IHNlY29uZERhdGVEYXkgPSBzZWNvbmREYXRlLmdldERhdGUoKSA8IDEwID8gJzAnICsgc2Vjb25kRGF0ZS5nZXREYXRlKCkgOiBzZWNvbmREYXRlLmdldERhdGUoKTtcbmNvbnN0IHNlY29uZERhdGVNb250aCA9IHNlY29uZERhdGUuZ2V0TW9udGgoKSArIDEgPCAxMCA/ICcwJyArIChzZWNvbmREYXRlLmdldE1vbnRoKCkgKyAxKSA6IHNlY29uZERhdGUuZ2V0TW9udGgoKSArIDE7XG5jb25zdCBzZWNvbmREYXRlWWVhciA9IHNlY29uZERhdGUuZ2V0RnVsbFllYXIoKSArICcnO1xuY29uc3Qgc2Vjb25kRGF5ID0gYCR7c2Vjb25kRGF0ZVllYXJ9LSR7c2Vjb25kRGF0ZU1vbnRofS0ke3NlY29uZERhdGVEYXl9YDtcblxubGV0IHVzZXJEYXRhOiB1bmtub3duXG5sZXQgZmF2b3JpdGVzQW1vdW50OiB1bmtub3duXG5pbnRlcmZhY2UgVXNlckRhdGEge1xuICB1c2VybmFtZTogc3RyaW5nLFxuICBhdmF0YXJVUkw6IHN0cmluZ1xufVxuXG5jb25zdCBnZXRVc2VyRGF0YSA9ICgpID0+IHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh7dXNlcm5hbWU6ICdKb2huIFNtaXRoJywgYXZhdGFyVVJMOiAnL2ltZy9hdmF0YXIucG5nJ30pKVxuICByZXR1cm4gIHVzZXJEYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKSBhcyBVc2VyRGF0YVxufVxuXG5jb25zdCB2YWxpZGF0ZURhdGEgPSAoZGF0YTogYW55KTpVc2VyRGF0YSA9PiB7XG4gIGNvbnNvbGUubG9nKGRhdGEsIGRhdGEudXNlcm5hbWUsIGRhdGEuYXZhdGFyVVJMLCB0eXBlb2YgZGF0YSwgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICwgICd1c2VybmFtZScgaW4gZGF0YSwgJ2F2YXRhclVSTCcgaW4gZGF0YSlcbiAgaWYodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICd1c2VybmFtZScgaW4gZGF0YSAmJiAnYXZhdGFyVVJMJyBpbiBkYXRhKSB7XG4gICAgY29uc29sZS5sb2coZGF0YSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG59XG5cbmNvbnN0IGdldEZhdm9yaXRlc0Ftb3VudCA9ICgpID0+IHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zhdm9yaXRlc0Ftb3VudCcsICc1JylcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmYXZvcml0ZXNBbW91bnQnKVxufVxuXG5nZXRVc2VyRGF0YSgpXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCBkYXRhID0gIHZhbGlkYXRlRGF0YSh1c2VyRGF0YSlcbiAgZmF2b3JpdGVzQW1vdW50ID0gTnVtYmVyKGdldEZhdm9yaXRlc0Ftb3VudCgpKVxuICBpZih0eXBlb2YgZmF2b3JpdGVzQW1vdW50ID09PSAnbnVtYmVyJykge1xuICAgIHJlbmRlclVzZXJCbG9jayhkYXRhLnVzZXJuYW1lLGRhdGEuYXZhdGFyVVJMLGZhdm9yaXRlc0Ftb3VudClcbiAgfVxuICByZW5kZXJTZWFyY2hGb3JtQmxvY2sobmV4dERheSwgc2Vjb25kRGF5KVxuICByZW5kZXJTZWFyY2hTdHViQmxvY2soKVxuICByZW5kZXJUb2FzdChcbiAgICB7dGV4dDogJ9Ct0YLQviDQv9GA0LjQvNC10YAg0YPQstC10LTQvtC80LvQtdC90LjRjy4g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtdCz0L4g0L/RgNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4JywgdHlwZTogJ3N1Y2Nlc3MnfSxcbiAgICB7bmFtZTogJ9Cf0L7QvdGP0LsnLCBoYW5kbGVyOiAoKSA9PiB7Y29uc29sZS5sb2coJ9Cj0LLQtdC00L7QvNC70LXQvdC40LUg0LfQsNC60YDRi9GC0L4nKX19XG4gIClcbn0pXG5cbiJdfQ==