import { renderSearchFormBlock } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
const date = new Date();
const nextDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
const nextDateDay = nextDate.getDate() < 10 ? '0' + nextDate.getDate() : nextDate.getDate();
const nextDateMonth = nextDate.getMonth() + 1 < 10 ? '0' + (nextDate.getMonth() + 1) : nextDate.getMonth() + 1;
const nextDateYear = nextDate.getFullYear() + '';
const nextDay = `${nextDateYear}-${nextDateMonth}-${nextDateDay}`;
const secondDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 3);
const secondDateDay = secondDate.getDate() < 10 ? '0' + secondDate.getDate() : secondDate.getDate();
const secondDateMonth = secondDate.getMonth() + 1 < 10 ? '0' + (secondDate.getMonth() + 1) : secondDate.getMonth() + 1;
const secondDateYear = secondDate.getFullYear() + '';
const secondDay = `${secondDateYear}-${secondDateMonth}-${secondDateDay}`;
let userData;
let favoritesAmount;
export const getUserData = () => {
    localStorage.setItem('user', JSON.stringify({ username: 'John Smith', avatarURL: '/img/avatar.png' }));
    return JSON.parse(localStorage.getItem('user'));
};
export const isUserData = (data) => {
    return typeof data === 'object' && 'username' in data && 'avatarURL' in data;
};
export const getFavoritesAmount = () => {
    console.log(JSON.parse(localStorage.getItem('favoritesAmount')));
    if (JSON.parse(localStorage.getItem('favoritesAmount')) !== null) {
        return Object.keys(JSON.parse(localStorage.getItem('favoritesAmount'))).length;
    }
    return 0;
};
window.addEventListener('DOMContentLoaded', () => {
    userData = getUserData();
    favoritesAmount = getFavoritesAmount();
    if (isUserData(userData) && typeof favoritesAmount === 'number') {
        renderUserBlock(userData.username, userData.avatarURL, favoritesAmount);
    }
    renderSearchFormBlock(nextDay, secondDay);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7QUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7QUFDaEYsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQzNGLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDOUcsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUNoRCxNQUFNLE9BQU8sR0FBRyxHQUFHLFlBQVksSUFBSSxhQUFhLElBQUksV0FBVyxFQUFFLENBQUE7QUFDakUsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJ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QSxDQUFDLEVBQUMsQ0FDckUsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyU2VhcmNoRm9ybUJsb2NrIH0gZnJvbSAnLi9zZWFyY2gtZm9ybS5qcydcbmltcG9ydCB7IHJlbmRlclNlYXJjaFN0dWJCbG9jayB9IGZyb20gJy4vc2VhcmNoLXJlc3VsdHMuanMnXG5pbXBvcnQgeyByZW5kZXJVc2VyQmxvY2sgfSBmcm9tICcuL3VzZXIuanMnXG5pbXBvcnQgeyByZW5kZXJUb2FzdCB9IGZyb20gJy4vbGliLmpzJ1xuXG5jb25zdCBkYXRlID0gbmV3IERhdGUoKVxuY29uc3QgbmV4dERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSxkYXRlLmdldERhdGUoKSArMSlcbmNvbnN0IG5leHREYXRlRGF5ID0gbmV4dERhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyBuZXh0RGF0ZS5nZXREYXRlKCkgOiBuZXh0RGF0ZS5nZXREYXRlKClcbmNvbnN0IG5leHREYXRlTW9udGggPSBuZXh0RGF0ZS5nZXRNb250aCgpICsgMSA8IDEwID8gJzAnICsgKG5leHREYXRlLmdldE1vbnRoKCkgKyAxKSA6IG5leHREYXRlLmdldE1vbnRoKCkgKyAxXG5jb25zdCBuZXh0RGF0ZVllYXIgPSBuZXh0RGF0ZS5nZXRGdWxsWWVhcigpICsgJydcbmNvbnN0IG5leHREYXkgPSBgJHtuZXh0RGF0ZVllYXJ9LSR7bmV4dERhdGVNb250aH0tJHtuZXh0RGF0ZURheX1gXG5jb25zdCBzZWNvbmREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpICsgMyk7XG5jb25zdCBzZWNvbmREYXRlRGF5ID0gc2Vjb25kRGF0ZS5nZXREYXRlKCkgPCAxMCA/ICcwJyArIHNlY29uZERhdGUuZ2V0RGF0ZSgpIDogc2Vjb25kRGF0ZS5nZXREYXRlKCk7XG5jb25zdCBzZWNvbmREYXRlTW9udGggPSBzZWNvbmREYXRlLmdldE1vbnRoKCkgKyAxIDwgMTAgPyAnMCcgKyAoc2Vjb25kRGF0ZS5nZXRNb250aCgpICsgMSkgOiBzZWNvbmREYXRlLmdldE1vbnRoKCkgKyAxO1xuY29uc3Qgc2Vjb25kRGF0ZVllYXIgPSBzZWNvbmREYXRlLmdldEZ1bGxZZWFyKCkgKyAnJztcbmNvbnN0IHNlY29uZERheSA9IGAke3NlY29uZERhdGVZZWFyfS0ke3NlY29uZERhdGVNb250aH0tJHtzZWNvbmREYXRlRGF5fWA7XG5cbmxldCB1c2VyRGF0YTogdW5rbm93blxubGV0IGZhdm9yaXRlc0Ftb3VudDogdW5rbm93blxuaW50ZXJmYWNlIFVzZXJEYXRhIHtcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgYXZhdGFyVVJMOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IGdldFVzZXJEYXRhID0gKCk6VXNlckRhdGEgPT4ge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHt1c2VybmFtZTogJ0pvaG4gU21pdGgnLCBhdmF0YXJVUkw6ICcvaW1nL2F2YXRhci5wbmcnfSkpXG4gIHJldHVybiAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKVxufVxuXG5leHBvcnQgY29uc3QgaXNVc2VyRGF0YSA9IChkYXRhOiB1bmtub3duKTpkYXRhIGlzIFVzZXJEYXRhID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAndXNlcm5hbWUnIGluIGRhdGEgJiYgJ2F2YXRhclVSTCcgaW4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RmF2b3JpdGVzQW1vdW50ID0gKCk6bnVtYmVyID0+IHtcbiAgY29uc29sZS5sb2coSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzQW1vdW50JykpKVxuICBpZihKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmYXZvcml0ZXNBbW91bnQnKSkgIT09IG51bGwpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzQW1vdW50JykpKS5sZW5ndGhcbiAgfVxuICByZXR1cm4gMFxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgdXNlckRhdGEgPSBnZXRVc2VyRGF0YSgpXG4gIGZhdm9yaXRlc0Ftb3VudCA9IGdldEZhdm9yaXRlc0Ftb3VudCgpXG4gIGlmKGlzVXNlckRhdGEodXNlckRhdGEpICYmIHR5cGVvZiBmYXZvcml0ZXNBbW91bnQgPT09ICdudW1iZXInKSB7XG4gICAgcmVuZGVyVXNlckJsb2NrKHVzZXJEYXRhLnVzZXJuYW1lLCB1c2VyRGF0YS5hdmF0YXJVUkwsIGZhdm9yaXRlc0Ftb3VudClcbiAgfVxuICByZW5kZXJTZWFyY2hGb3JtQmxvY2sobmV4dERheSwgc2Vjb25kRGF5KVxuICByZW5kZXJTZWFyY2hTdHViQmxvY2soKVxuICByZW5kZXJUb2FzdChcbiAgICB7dGV4dDogJ9Ct0YLQviDQv9GA0LjQvNC10YAg0YPQstC10LTQvtC80LvQtdC90LjRjy4g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtdCz0L4g0L/RgNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4JywgdHlwZTogJ3N1Y2Nlc3MnfSxcbiAgICB7bmFtZTogJ9Cf0L7QvdGP0LsnLCBoYW5kbGVyOiAoKSA9PiB7Y29uc29sZS5sb2coJ9Cj0LLQtdC00L7QvNC70LXQvdC40LUg0LfQsNC60YDRi9GC0L4nKX19XG4gIClcbn0pXG5cbiJdfQ==